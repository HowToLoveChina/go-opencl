package opencl

/*
#cgo CFLAGS: -I CL
#cgo LDFLAGS: -lOpenCL

#include "CL/opencl.h"

*/
import "C"

import (
	"unsafe"
)

type DeviceType C.cl_device_type

const (
	CL_DEVICE_TYPE_DEFAULT     DeviceType = C.CL_DEVICE_TYPE_DEFAULT
	CL_DEVICE_TYPE_CPU         DeviceType = C.CL_DEVICE_TYPE_CPU
	CL_DEVICE_TYPE_GPU         DeviceType = C.CL_DEVICE_TYPE_GPU
	CL_DEVICE_TYPE_ACCELERATOR DeviceType = C.CL_DEVICE_TYPE_ACCELERATOR
	//CL_DEVICE_TYPE_CUSTOM      DeviceType = C.CL_DEVICE_TYPE_CUSTOM
	CL_DEVICE_TYPE_ALL DeviceType = C.CL_DEVICE_TYPE_ALL
)

type DeviceProperty C.cl_device_info

const (
	CL_DEVICE_ADDRESS_BITS DeviceProperty = C.CL_DEVICE_ADDRESS_BITS
	CL_DEVICE_AVAILABLE    DeviceProperty = C.CL_DEVICE_AVAILABLE
	//CL_DEVICE_BUILT_IN_KERNELS DeviceProperty = C.CL_DEVICE_BUILT_IN_KERNELS
	CL_DEVICE_COMPILER_AVAILABLE DeviceProperty = C.CL_DEVICE_COMPILER_AVAILABLE
	//CL_DEVICE_DOUBLE_FP_CONFIG          DeviceProperty = C.CL_DEVICE_DOUBLE_FP_CONFIG
	CL_DEVICE_ENDIAN_LITTLE             DeviceProperty = C.CL_DEVICE_ENDIAN_LITTLE
	CL_DEVICE_ERROR_CORRECTION_SUPPORT  DeviceProperty = C.CL_DEVICE_ERROR_CORRECTION_SUPPORT
	CL_DEVICE_EXECUTION_CAPABILITIES    DeviceProperty = C.CL_DEVICE_EXECUTION_CAPABILITIES
	CL_DEVICE_EXTENSIONS                DeviceProperty = C.CL_DEVICE_EXTENSIONS
	CL_DEVICE_GLOBAL_MEM_CACHE_SIZE     DeviceProperty = C.CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
	CL_DEVICE_GLOBAL_MEM_CACHE_TYPE     DeviceProperty = C.CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
	CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE DeviceProperty = C.CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
	CL_DEVICE_GLOBAL_MEM_SIZE           DeviceProperty = C.CL_DEVICE_GLOBAL_MEM_SIZE
	//CL_DEVICE_HALF_FP_CONFIG                DeviceProperty = C.CL_DEVICE_HALF_FP_CONFIG
	CL_DEVICE_HOST_UNIFIED_MEMORY DeviceProperty = C.CL_DEVICE_HOST_UNIFIED_MEMORY
	CL_DEVICE_IMAGE_SUPPORT       DeviceProperty = C.CL_DEVICE_IMAGE_SUPPORT
	CL_DEVICE_IMAGE2D_MAX_HEIGHT  DeviceProperty = C.CL_DEVICE_IMAGE2D_MAX_HEIGHT
	CL_DEVICE_IMAGE2D_MAX_WIDTH   DeviceProperty = C.CL_DEVICE_IMAGE2D_MAX_WIDTH
	CL_DEVICE_IMAGE3D_MAX_DEPTH   DeviceProperty = C.CL_DEVICE_IMAGE3D_MAX_DEPTH
	CL_DEVICE_IMAGE3D_MAX_HEIGHT  DeviceProperty = C.CL_DEVICE_IMAGE3D_MAX_HEIGHT
	CL_DEVICE_IMAGE3D_MAX_WIDTH   DeviceProperty = C.CL_DEVICE_IMAGE3D_MAX_WIDTH
	//CL_DEVICE_IMAGE_MAX_BUFFER_SIZE      DeviceProperty = C.CL_DEVICE_IMAGE_MAX_BUFFER_SIZE
	//CL_DEVICE_IMAGE_MAX_ARRAY_SIZE       DeviceProperty = C.CL_DEVICE_IMAGE_MAX_ARRAY_SIZE
	//CL_DEVICE_LINKER_AVAILABLE           DeviceProperty = C.CL_DEVICE_LINKER_AVAILABLE
	CL_DEVICE_LOCAL_MEM_SIZE             DeviceProperty = C.CL_DEVICE_LOCAL_MEM_SIZE
	CL_DEVICE_LOCAL_MEM_TYPE             DeviceProperty = C.CL_DEVICE_LOCAL_MEM_TYPE
	CL_DEVICE_MAX_CLOCK_FREQUENCY        DeviceProperty = C.CL_DEVICE_MAX_CLOCK_FREQUENCY
	CL_DEVICE_MAX_COMPUTE_UNITS          DeviceProperty = C.CL_DEVICE_MAX_COMPUTE_UNITS
	CL_DEVICE_MAX_CONSTANT_ARGS          DeviceProperty = C.CL_DEVICE_MAX_CONSTANT_ARGS
	CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE   DeviceProperty = C.CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
	CL_DEVICE_MAX_MEM_ALLOC_SIZE         DeviceProperty = C.CL_DEVICE_MAX_MEM_ALLOC_SIZE
	CL_DEVICE_MAX_PARAMETER_SIZE         DeviceProperty = C.CL_DEVICE_MAX_PARAMETER_SIZE
	CL_DEVICE_MAX_READ_IMAGE_ARGS        DeviceProperty = C.CL_DEVICE_MAX_READ_IMAGE_ARGS
	CL_DEVICE_MAX_SAMPLERS               DeviceProperty = C.CL_DEVICE_MAX_SAMPLERS
	CL_DEVICE_MAX_WORK_GROUP_SIZE        DeviceProperty = C.CL_DEVICE_MAX_WORK_GROUP_SIZE
	CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS   DeviceProperty = C.CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
	CL_DEVICE_MAX_WORK_ITEM_SIZES        DeviceProperty = C.CL_DEVICE_MAX_WORK_ITEM_SIZES
	CL_DEVICE_MAX_WRITE_IMAGE_ARGS       DeviceProperty = C.CL_DEVICE_MAX_WRITE_IMAGE_ARGS
	CL_DEVICE_MEM_BASE_ADDR_ALIGN        DeviceProperty = C.CL_DEVICE_MEM_BASE_ADDR_ALIGN
	CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE   DeviceProperty = C.CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE
	CL_DEVICE_NAME                       DeviceProperty = C.CL_DEVICE_NAME
	CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR   DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR
	CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT  DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT
	CL_DEVICE_NATIVE_VECTOR_WIDTH_INT    DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_INT
	CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG   DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG
	CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT  DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT
	CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE
	CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF   DeviceProperty = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
	CL_DEVICE_OPENCL_C_VERSION           DeviceProperty = C.CL_DEVICE_OPENCL_C_VERSION
	//CL_DEVICE_PARENT_DEVICE              DeviceProperty = C.CL_DEVICE_PARENT_DEVICE
	//CL_DEVICE_PARTITION_MAX_SUB_DEVICES     DeviceProperty = C.CL_DEVICE_PARTITION_MAX_SUB_DEVICES
	//CL_DEVICE_PARTITION_PROPERTIES          DeviceProperty = C.CL_DEVICE_PARTITION_PROPERTIES
	//CL_DEVICE_PARTITION_AFFINITY_DOMAIN     DeviceProperty = C.CL_DEVICE_PARTITION_AFFINITY_DOMAIN
	//CL_DEVICE_PARTITION_TYPE                DeviceProperty = C.CL_DEVICE_PARTITION_TYPE
	CL_DEVICE_PLATFORM                      DeviceProperty = C.CL_DEVICE_PLATFORM
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR   DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT  DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT    DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG   DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT  DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
	CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF   DeviceProperty = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
	//CL_DEVICE_PRINTF_BUFFER_SIZE            DeviceProperty = C.CL_DEVICE_PRINTF_BUFFER_SIZE
	//CL_DEVICE_PREFERRED_INTEROP_USER_SYNC   DeviceProperty = C.CL_DEVICE_PREFERRED_INTEROP_USER_SYNC
	CL_DEVICE_PROFILE                    DeviceProperty = C.CL_DEVICE_PROFILE
	CL_DEVICE_PROFILING_TIMER_RESOLUTION DeviceProperty = C.CL_DEVICE_PROFILING_TIMER_RESOLUTION
	CL_DEVICE_QUEUE_PROPERTIES           DeviceProperty = C.CL_DEVICE_QUEUE_PROPERTIES
	//CL_DEVICE_REFERENCE_COUNT            DeviceProperty = C.CL_DEVICE_REFERENCE_COUNT
	CL_DEVICE_SINGLE_FP_CONFIG DeviceProperty = C.CL_DEVICE_SINGLE_FP_CONFIG
	CL_DEVICE_TYPE             DeviceProperty = C.CL_DEVICE_TYPE
	CL_DEVICE_VENDOR           DeviceProperty = C.CL_DEVICE_VENDOR
	CL_DEVICE_VENDOR_ID        DeviceProperty = C.CL_DEVICE_VENDOR_ID
	CL_DEVICE_VERSION          DeviceProperty = C.CL_DEVICE_VERSION
	CL_DRIVER_VERSION          DeviceProperty = C.CL_DRIVER_VERSION
)

func DeviceProperties() []DeviceProperty {
	return []DeviceProperty{
		CL_DEVICE_ADDRESS_BITS,
		CL_DEVICE_AVAILABLE,
		//CL_DEVICE_BUILT_IN_KERNELS,
		CL_DEVICE_COMPILER_AVAILABLE,
		//CL_DEVICE_DOUBLE_FP_CONFIG,
		CL_DEVICE_ENDIAN_LITTLE,
		CL_DEVICE_ERROR_CORRECTION_SUPPORT,
		CL_DEVICE_EXECUTION_CAPABILITIES,
		CL_DEVICE_EXTENSIONS,
		CL_DEVICE_GLOBAL_MEM_CACHE_SIZE,
		CL_DEVICE_GLOBAL_MEM_CACHE_TYPE,
		CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE,
		CL_DEVICE_GLOBAL_MEM_SIZE,
		//CL_DEVICE_HALF_FP_CONFIG,
		CL_DEVICE_HOST_UNIFIED_MEMORY,
		CL_DEVICE_IMAGE_SUPPORT,
		CL_DEVICE_IMAGE2D_MAX_HEIGHT,
		CL_DEVICE_IMAGE2D_MAX_WIDTH,
		CL_DEVICE_IMAGE3D_MAX_DEPTH,
		CL_DEVICE_IMAGE3D_MAX_HEIGHT,
		CL_DEVICE_IMAGE3D_MAX_WIDTH,
		//CL_DEVICE_IMAGE_MAX_BUFFER_SIZE,
		//CL_DEVICE_IMAGE_MAX_ARRAY_SIZE,
		//CL_DEVICE_LINKER_AVAILABLE,
		CL_DEVICE_LOCAL_MEM_SIZE,
		CL_DEVICE_LOCAL_MEM_TYPE,
		CL_DEVICE_MAX_CLOCK_FREQUENCY,
		CL_DEVICE_MAX_COMPUTE_UNITS,
		CL_DEVICE_MAX_CONSTANT_ARGS,
		CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE,
		CL_DEVICE_MAX_MEM_ALLOC_SIZE,
		CL_DEVICE_MAX_PARAMETER_SIZE,
		CL_DEVICE_MAX_READ_IMAGE_ARGS,
		CL_DEVICE_MAX_SAMPLERS,
		CL_DEVICE_MAX_WORK_GROUP_SIZE,
		CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS,
		CL_DEVICE_MAX_WORK_ITEM_SIZES,
		CL_DEVICE_MAX_WRITE_IMAGE_ARGS,
		CL_DEVICE_MEM_BASE_ADDR_ALIGN,
		CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE,
		CL_DEVICE_NAME,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_INT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF,
		CL_DEVICE_OPENCL_C_VERSION,
		//CL_DEVICE_PARENT_DEVICE,
		//CL_DEVICE_PARTITION_MAX_SUB_DEVICES,
		//CL_DEVICE_PARTITION_PROPERTIES,
		//CL_DEVICE_PARTITION_AFFINITY_DOMAIN,
		//CL_DEVICE_PARTITION_TYPE,
		CL_DEVICE_PLATFORM,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF,
		//CL_DEVICE_PRINTF_BUFFER_SIZE,
		//CL_DEVICE_PREFERRED_INTEROP_USER_SYNC,
		CL_DEVICE_PROFILE,
		CL_DEVICE_PROFILING_TIMER_RESOLUTION,
		CL_DEVICE_QUEUE_PROPERTIES,
		//CL_DEVICE_REFERENCE_COUNT,
		CL_DEVICE_SINGLE_FP_CONFIG,
		CL_DEVICE_TYPE,
		CL_DEVICE_VENDOR,
		CL_DEVICE_VENDOR_ID,
		CL_DEVICE_VERSION,
		CL_DRIVER_VERSION}
}

type Device struct {
	id C.cl_device_id
}

func Devices(t DeviceType) ([]Device, error) {
	platforms, err := Platforms()
	if err != nil {
		return nil, err
	}

	var devices []Device
	for _, platform := range platforms {
		if platform_devs, err := platform.Devices(t); err != nil {
			return devices, err
		} else {
			devices = append(devices, platform_devs...)
		}
	}
	return devices, nil
}

func (device *Device) Properties() (map[DeviceProperty]interface{}, error) {
	props := make(map[DeviceProperty]interface{})
	for _, prop := range DeviceProperties() {
		if data, err := device.Property(prop); err == nil {
			props[prop] = data
		} else if err != Cl_error(C.CL_INVALID_VALUE) {
			return nil, err
		}
	}
	if len(props) == 0 {
		return nil, Cl_error(C.CL_INVALID_VALUE)
	}
	return props, nil
}

func (device *Device) Property(prop DeviceProperty) (interface{}, error) {
	var data interface{}
	var length C.size_t
	var ret C.cl_int

	switch prop {
	case CL_DEVICE_AVAILABLE,
		CL_DEVICE_COMPILER_AVAILABLE,
		CL_DEVICE_ENDIAN_LITTLE,
		CL_DEVICE_ERROR_CORRECTION_SUPPORT,
		CL_DEVICE_HOST_UNIFIED_MEMORY,
		CL_DEVICE_IMAGE_SUPPORT:
		//CL_DEVICE_LINKER_AVAILABLE,
		//CL_DEVICE_PREFERRED_INTEROP_USER_SYNC:
		var val C.cl_bool
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
		data = val == C.CL_TRUE

	case CL_DEVICE_ADDRESS_BITS,
		CL_DEVICE_MAX_CLOCK_FREQUENCY,
		CL_DEVICE_MAX_COMPUTE_UNITS,
		CL_DEVICE_MAX_CONSTANT_ARGS,
		CL_DEVICE_MAX_READ_IMAGE_ARGS,
		CL_DEVICE_MAX_SAMPLERS,
		CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS,
		CL_DEVICE_MAX_WRITE_IMAGE_ARGS,
		CL_DEVICE_MEM_BASE_ADDR_ALIGN,
		CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_INT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE,
		CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF,
		//CL_DEVICE_PARTITION_MAX_SUB_DEVICES,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE,
		CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF,
		//CL_DEVICE_REFERENCE_COUNT,
		CL_DEVICE_VENDOR_ID:
		var val C.cl_uint
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
		data = val

	case CL_DEVICE_IMAGE2D_MAX_HEIGHT,
		CL_DEVICE_IMAGE2D_MAX_WIDTH,
		CL_DEVICE_IMAGE3D_MAX_DEPTH,
		CL_DEVICE_IMAGE3D_MAX_HEIGHT,
		CL_DEVICE_IMAGE3D_MAX_WIDTH,
		//CL_DEVICE_IMAGE_MAX_BUFFER_SIZE,
		//CL_DEVICE_IMAGE_MAX_ARRAY_SIZE,
		CL_DEVICE_MAX_PARAMETER_SIZE,
		CL_DEVICE_MAX_WORK_GROUP_SIZE,
		//CL_DEVICE_PRINTF_BUFFER_SIZE,
		CL_DEVICE_PROFILING_TIMER_RESOLUTION:
		var val C.size_t
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
		data = val

	case CL_DEVICE_GLOBAL_MEM_CACHE_SIZE,
		CL_DEVICE_GLOBAL_MEM_SIZE,
		CL_DEVICE_LOCAL_MEM_SIZE,
		CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE,
		CL_DEVICE_MAX_MEM_ALLOC_SIZE:
		var val C.cl_ulong
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
		data = val

	/*case CL_DEVICE_PLATFORM:
	var val C.cl_platform_id
	ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
	data = Platform{id: val}*/

	/*case CL_DEVICE_PARENT_DEVICE:
	var val C.cl_device_id
	ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
	data = Device{id: val}*/

	case CL_DEVICE_TYPE:
		var val C.cl_device_type
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), C.size_t(unsafe.Sizeof(val)), unsafe.Pointer(&val), &length)
		data = DeviceType(val)

	case //CL_DEVICE_BUILT_IN_KERNELS,
		CL_DEVICE_EXTENSIONS,
		CL_DEVICE_NAME,
		CL_DEVICE_OPENCL_C_VERSION,
		CL_DEVICE_PROFILE,
		CL_DEVICE_VENDOR,
		CL_DEVICE_VERSION,
		CL_DRIVER_VERSION:
		const bufsize = 1024
		var buf [bufsize]C.char
		ret = C.clGetDeviceInfo(device.id, C.cl_device_info(prop), bufsize, unsafe.Pointer(&buf[0]), &length)
		data = C.GoStringN(&buf[0], C.int(length))

	default:
		return nil, Cl_error(C.CL_INVALID_VALUE)
	}

	if ret != C.CL_SUCCESS {
		return nil, Cl_error(ret)
	}
	return data, nil
}
